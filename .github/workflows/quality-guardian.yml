name: Quality Guardian (Stars Project)

on:
  push:
  pull_request:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  rust-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Run clippy (locked)
        run: |
          if [ -f "Cargo.toml" ]; then cargo clippy --locked --all-targets --all-features; else echo "No Cargo.toml in root"; fi

      - name: Security (cargo-deny/audit)
        run: |
          if command -v cargo-deny >/dev/null 2>&1; then cargo deny check || true; fi
          if command -v cargo-audit >/dev/null 2>&1; then cargo audit || true; fi

  scripts-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Rust anti-pattern scripts
        run: |
          if [ -f "scripts/anti-patterns.sh" ]; then bash scripts/anti-patterns.sh; fi

      - name: Run JS/TS anti-pattern scripts
        run: |
          if [ -f "scripts/anti-patterns-js.sh" ]; then bash scripts/anti-patterns-js.sh; else echo "No JS/TS anti-pattern script"; fi

      - name: Baseline secret scanning
        run: |
          if [ -f "scripts/secret-scan.sh" ]; then bash scripts/secret-scan.sh; else echo "No secret scan script"; fi

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          cargo install cargo-deny --locked || true
          cargo install cargo-audit --locked || true

      - name: Cargo audit (fail on advisories)
        run: |
          if command -v cargo-audit >/dev/null 2>&1; then cargo audit --deny warnings; else echo "cargo-audit missing" && exit 1; fi

      - name: Cargo deny (advisories/licenses/bans/sources)
        run: |
          if command -v cargo-deny >/dev/null 2>&1; then \
            cargo deny check advisories && \
            cargo deny check licenses && \
            cargo deny check bans && \
            cargo deny check sources; \
          else echo "cargo-deny missing" && exit 1; fi

  quality-report:
    runs-on: ubuntu-latest
    needs: [rust-quality, scripts-quality, documentation-quality, security-audit, performance-benchmarks]
    if: always()
    steps:
      - name: Final quality report
        run: |
          echo "📊 FINAL QUALITY REPORT"
          echo "rust-quality:       ${{ needs.rust-quality.result }}"
          echo "scripts-quality:    ${{ needs.scripts-quality.result }}"
          echo "documentation:      ${{ needs.documentation-quality.result }}"
          echo "security-audit:     ${{ needs.security-audit.result }}"
          echo "performance-bench:  ${{ needs.performance-benchmarks.result }}"

  documentation-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate critical docs and cargo doc
        run: |
          missing=0
          for f in README.md CLAUDE.md QUALITY.md; do
            if [ ! -f "$f" ]; then echo "❌ Missing $f"; missing=1; else echo "✅ $f"; fi
          done
          if [ -f Cargo.toml ]; then cargo doc --no-deps --document-private-items || true; fi
          if [ $missing -eq 1 ]; then exit 1; fi

  performance-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Optional WASM perf check
        run: |
          if [ -d "wasm-astro" ]; then
            echo "Checking wasm-astro size..."
            cd wasm-astro
            if command -v wasm-pack >/dev/null 2>&1; then wasm-pack build --target bundler --release --out-dir pkg || true; fi
            if [ -f pkg/*.wasm ]; then ls -l pkg/*.wasm; fi
          else
            echo "No wasm-astro module, skipping"
          fi
