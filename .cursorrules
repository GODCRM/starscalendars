You are an expert in Rust 1.88+ (26.06.2025 release), Axum (latest), Teloxide for Telegram Bot API, WASM, astronomical calculations using astro-rust (local copy, read-only), TypeScript 5.9, Babylon.js 8, Vite 7, React 19, and high-performance 3D web development with production-grade Telegram-only authentication.

## Communication Style
- DO NOT GIVE ME HIGH LEVEL STUFF, IF I ASK FOR FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT "Here's how you
can blablabla"
- Be casual unless otherwise specified
- Be terse
- Suggest solutions that I didn't think about‚Äîanticipate my needs
- Treat me as an expert
- Be accurate and thorough
- Give the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer
- Value facts from web search on new programming principles for second half of 2025 over good arguments over authorities, the source is
irrelevant
- Use web_search for broad/general internet research, and curl for deep/detailed parsing of specific relevant pages (e.g., docs, RFCs, release notes) when needed
- Consider new technologies and contrarian ideas, not just the conventional wisdom
- You may use high levels of speculation or prediction, just flag it for me
- No moral lectures
- Discuss safety only when it's crucial and non-obvious
- If your content policy is an issue, provide the closest acceptable response and expl

## **CRITICAL RULES:**
**1. When writing code, be 100% sure you don't break anything existing.**

**2. üö® MANDATORY RESEARCH REQUIREMENT:**
**üî• –ù–ò–ö–ê–ö–û–ô –≠–ö–û–ù–û–ú–ò–ò –¢–û–ö–ï–ù–û–í! –¢–û–õ–¨–ö–û –ü–û–õ–ù–û–¶–ï–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø! üî•**
**BEFORE writing ANY code, ALL agents MUST:**
- **WebFetch** official documentation for ALL libraries and frameworks
- **Study** breaking changes, new APIs, deprecated methods, migration guides
- **Research** 2025 professional production-ready best practices and patterns
- **Analyze** latest features, optimization techniques, and memory management
- **üö® VERIFY EXACT LATEST VERSIONS:**
  - **Rust –∫—Ä–µ–π—Ç—ã**: **docs.rs** –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (—Ç–∞–º –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è + –≤–µ—Ä—Å–∏–∏)
  - **npm –ø–∞–∫–µ—Ç—ã**: **https://www.npmjs.com/package/** –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
  - **crates.io** - –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è Rust
- **üö® –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø: "latest stable"** - –≤ tz.md, CLAUDE.md —É–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
- **üö® –ö–û–ù–§–ò–ì –§–ê–ô–õ–´ –ë–ï–ó PATCH/MINOR** - –≤ Cargo.toml/package.json: `tokio = "1"`, `serde = "1"`, `axum = "0.8"`, `@babylonjs/core = "8"` (–º–∞–∂–æ—Ä–Ω—ã–π –ø–∏–Ω; —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∏–Ω–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è 8.x –±–µ—Ä–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è latest –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–±–æ—Ä–∫–∏)
- **üö® –î–õ–Ø 0.x –í–ï–†–°–ò–ô**: `some-crate = "0.1"` (–∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –ù–ï "0.1.x"!)
- **Document** ALL research findings before implementation
- **Never assume** - always verify current standards and professional practices
- **üî• –≠–ö–û–ù–û–ú–ò–Ø –¢–û–ö–ï–ù–û–í –ü–†–ò–í–û–î–ò–¢ –ö –ú–ù–û–ì–û–î–ù–ï–í–ù–´–ú –ü–†–û–ë–õ–ï–ú–ê–ú! üî•**

**‚ö†Ô∏è This comprehensive research is MANDATORY and comes FIRST for every agent.**

## Development Approach

### Project Setup
- Use pnpm workspaces for monorepo management
- Each module (frontend, backend, wasm-astro, telegram-bot, i18n) is a separate workspace
- WASM modules compile to bundler target for Vite integration
- Telegram bot runs as independent service with webhook/polling support
- **üö® CRITICAL**: astro-rust/ folder contains local copy of astronomical library - NEVER modify this folder!

### Key Design Decisions (per tz.md)
- **Clean Architecture**: Domain ‚Üí UseCases ‚Üí Adapters ‚Üí Delivery layers
- **WASM Interface**: Exactly `compute_all(jd: f64) -> *const f64` + `calculate_solar_zenith_position_rad(jd)` with thread-local buffers
- **Sun Position**: Static at (0,0,0) (heliocentric scene)
- **JWT**: RS256 with custom claims `is_telegram_subscribed: boolean`
- **Database**: PostgreSQL with specific schema: `users`, `refresh_tokens`, `telegram_linking`
- **Authentication**: Pure Telegram-only, no traditional passwords
- **GUI Strategy**: Babylon GUI for dates/quantum date; single `#stats` overlay for FPS; no other overlays
- **Data Transfer**: Float64Array view –≤ WebAssembly.Memory –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
- **Multilingual System**: Fluent (ICU MessageFormat) with 10-language support
- **Telegram Integration**: UUID tokens for account linking, getChatMember verification
- **WebSocket Protocol**: Compact JSON/CBOR with JWT as first message
- **Dioxus Server Functions**: Type-safe RPC between client and server

## Deployment Strategy (NO DOCKER!)

### **üö® CRITICAL DEPLOYMENT POLICY:**
**–ú–´ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú DOCKER –ò –†–£–ö–ê–ú–ò –†–ê–ó–í–û–†–ê–ß–ò–í–ê–ï–ú –ù–ê –°–ï–†–í–ï–† AlmaLinux 9.4**

### Production Deployment Flow
1. **Frontend**: –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –≤ `frontend/dist/` —Å –ø–æ–º–æ—â—å—é `pnpm run build:prod`
2. **Backend**: –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ AlmaLinux 9.4 —Å `cargo build --release`
3. **WASM**: –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ —Å `wasm-pack build --release --target web`
4. **Deployment**: –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫ —É–∂–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É

### AlmaLinux 9.4 Server Setup
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Rust –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup update stable
rustup default stable

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
sudo dnf install -y gcc openssl-devel postgresql-devel

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –º–∞—à–∏–Ω–µ
cargo build --release --target-cpu=native

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
rsync -av frontend/dist/ /var/www/starscalendars/
```

### Deployment Agents
- **project-coordinator**: –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Å–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- **quality-guardian**: –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º

### Testing
- Focus on astronomical calculation accuracy testing
- Performance profiling for 60 FPS target
- Comprehensive Telegram Bot API integration testing
- Subscription verification accuracy testing
- 10-language localization completeness validation
- Load testing for 10,000+ concurrent bot users
- WASM-JS interop performance testing
- GUI performance comparison (HTML overlay vs Babylon GUI)
- Cross-platform language rendering testing

## Important Notes

- This project serves a spiritual community focused on astronomical/astrological practices
- Emphasis on "cinematic quality" and "high precision" astronomical calculations
- Community integration through Telegram is a core feature
- The main astronomical scene is accessible to all users without authentication
- Premium features require active Telegram channel subscription
- All user interactions route through Telegram for community building
- 10-language support with cultural sensitivity for global spiritual community
- GUI performance: HTML/CSS overlay significantly faster than Babylon.js GUI
- WASM performance: exactly one `compute_all(t)` call per frame (already implemented in frontend scene)
- Multilingual system: Fluent with ICU MessageFormat for 10-language support

## Code Quality Requirements (tz.md Standards)

### **Clean Architecture Compliance:**
- **Domain**: No dependencies on infrastructure, pure business logic
- **UseCases**: Depend only on domain and abstract ports
- **Infrastructure**: Implement ports, depend on external services
- **Delivery**: HTTP/WS handlers, depend on use-cases through DI

### **Performance Requirements (O(1) –≥–æ—Ä—è—á–∏–π –ø—É—Ç—å):**
- –ì–æ—Ä—è—á–∏–π –ø—É—Ç—å –∫–∞–¥—Ä–∞: —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ WASM `compute_all(t)`
- –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —á–µ—Ä–µ–∑ view –Ω–∞ WebAssembly.Memory
- –ù–∏ –æ–¥–Ω–æ–π –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –≤ Babylon.js –≤ –∫–∞–¥—Ä–µ
- SQL: –∏–Ω–¥–µ–∫—Å–Ω—ã–µ –ø–ª–∞–Ω—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

### **WASM Requirements:**
- Thread-local –±—É—Ñ–µ—Ä –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ tz.md
- –ù–æ–ª–µ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Float64Array view
- Feature flags –¥–ª—è browser/Node.js
- Exactly one `compute_all(t)` call per frame
- No string passing between WASM-JS

### **Database Requirements:**
- PostgreSQL schema exactly per tz.md
- SQLX compile-time –ø—Ä–æ–≤–µ—Ä–∫–∏
- –ò–Ω–¥–µ–∫—Å—ã –ø–æ username, telegram_user_id, exp
- UUID tokens for Telegram account linking
- Subscription status caching

## Anti-patterns FORBIDDEN (tz.md Strict)

### **Clean Architecture Violations:**
- Domain layer depending on infrastructure
- Use-cases directly calling external services
- Infrastructure in domain logic
- Circular dependencies between layers

### **Performance Critical (O(1) requirement):**
- Multiple WASM calls per frame (only ONE `compute_all(t)` allowed)
- Data copying between WASM-JS (use Float64Array view only)
- Babylon.js allocations in render loop
- SQL N+1 queries (use indexed queries only)
- Dynamic allocations in hot path

### **WASM Specific:**
- `panic!()` in WASM context (forbidden)
- String passing WASM‚ÜîJS (use numbers only)
- Multiple memory copies (zero-copy only)
- Missing thread-local buffers

### **Database:**
- Generic `AppError` (use specific error enums)
- Missing SQLX compile-time checks
- Blocking database calls in async
- Missing database indices

### **Telegram:**
- Missing webhook signature verification
- Hardcoded bot tokens
- Unhandled rate limits
- Missing getChatMember caching
- Missing UUID token generation for account linking
- Missing cultural adaptations for 10 languages

### **General Rust:**
- `unwrap()`, `expect()`, `panic!()`
- `as` conversions (use `TryFrom`)
- `Vec::new()` (use `Vec::with_capacity()`)
- `.await` in loops

## üåü ASTRO-RUST API USAGE RULES (MANDATORY)

### **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ASTRO-RUST:**

#### **1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ô –ö–û–ü–ò–ò:**
```toml
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å –±–∞–≥—Ñ–∏–∫—Å–∞–º–∏ (üö® –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ astro-rust/ –ø–∞–ø–∫—É!)
astro = { path = "./astro-rust" }

# ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û - –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –±–∞–≥–∞–º–∏
astro = "2.0.0"  # Broken decimal_day & lunar equations!
```
**üîí –í–ê–ñ–ù–û**: –ü–∞–ø–∫–∞ `astro-rust/` —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
- **‚úÖ –ú–û–ñ–ù–û**: –ß–∏—Ç–∞—Ç—å, –∏–∑—É—á–∞—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WASM –æ–±–µ—Ä—Ç–æ–∫
- **‚úÖ –ù–£–ñ–ù–û**: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑—É—á–∏—Ç—å API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞
- **‚ùå –ó–ê–ü–†–ï–©–ï–ù–û**: –ò–∑–º–µ–Ω—è—Ç—å, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ

#### **2. –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò API:**
```rust
// ‚úÖ –°–æ–ª–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è —ç–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è)
let (sun_ecl, sun_dist_km) = astro::sun::geocent_ecl_pos(julian_day);
// sun_ecl.long, sun_ecl.lat –≤ –†–ê–î–ò–ê–ù–ê–•!

// ‚úÖ –õ—É–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è ELP-2000/82 (–≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è —ç–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è)
let (moon_ecl, moon_dist_km) = astro::lunar::geocent_ecl_pos(julian_day);
// moon_ecl.long, moon_ecl.lat –≤ –†–ê–î–ò–ê–ù–ê–•!

// ‚úÖ –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ VSOP87 (–≥–µ–ª–∏–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–µ)
let (long_rad, lat_rad, dist_au) = astro::planet::heliocent_coords(&astro::planet::Planet::Earth, julian_day);
```

#### **3. –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–õ–ê–ù–ï–¢–´:**
```rust
use astro::planet::Planet;
// ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune
// ‚úÖ Pluto –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ astro::pluto –º–æ–¥—É–ª—å (–æ—Ç–¥–µ–ª—å–Ω–æ)
```

#### **4. –ö–û–û–†–î–ò–ù–ê–¢–ù–´–ï –°–ò–°–¢–ï–ú–´:**
```rust
// ‚úÖ EclPoint —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
struct EclPoint {
    pub long: f64,  // –≠–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞ –≤ –†–ê–î–ò–ê–ù–ê–•
    pub lat: f64,   // –≠–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞ –≤ –†–ê–î–ò–ê–ù–ê–•
}

// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Cartesian –¥–ª—è 3D —Å—Ü–µ–Ω—ã
fn ecl_to_cartesian(ecl_point: &EclPoint, radius_au: f64) -> Cartesian {
    let cos_lat = ecl_point.lat.cos();
    let x = radius_au * cos_lat * ecl_point.long.cos();
    let y = radius_au * cos_lat * ecl_point.long.sin();
    let z = radius_au * ecl_point.lat.sin();
    Cartesian::new(x, y, z)
}
```

#### **5. –ö–û–†–†–ï–ö–¶–ò–ò –ù–£–¢–ê–¶–ò–ò –ò –ü–†–ï–¶–ï–°–°–ò–ò:**
```rust
// ‚úÖ –ù—É—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
let (nut_long, nut_oblq) = astro::nutation::nutation(julian_day);

// ‚úÖ –ü—Ä–µ—Ü–µ—Å—Å–∏—è –º–µ–∂–¥—É —ç–ø–æ—Ö–∞–º–∏
let corrected_coords = astro::precess::precess_ecl_coords(ecl_coords, jd_old, jd_new);
```

#### **6. –ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:**
```rust
// ‚ùå –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ä–º—É–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ astro-rust!
// ‚ùå –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥—É—Å—ã - –≤—Å–µ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö!
// ‚ùå –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω—É—Ç–∞—Ü–∏–∏/–ø—Ä–µ—Ü–µ—Å—Å–∏–∏ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤!
```

## Key Development Patterns (tz.md Compliance)

### **Domain Layer Patterns:**
```rust
pub struct JulianDay(pub f64);
pub struct EclipticSpherical {
    pub lon_rad: f64,
    pub lat_rad: f64,
    pub r_au: f64,
}
pub struct Cartesian { pub x: f64, pub y: f64, pub z: f64 }
```

### **UseCase Patterns:**
```rust
#[async_trait::async_trait]
pub trait TelegramApi {
    async fn is_member_of_channel(&self, user_id: i64) -> anyhow::Result<bool>;
}
```

### **Performance Patterns (O(1) –≥–æ—Ä—è—á–∏–π –ø—É—Ç—å):**
- –†–æ–≤–Ω–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ WASM `compute_all(t)` –Ω–∞ –∫–∞–¥—Ä
- Float64Array view –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vector3/Quaternion –≤ Babylon.js
- O(1) SQL –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
- Thread-local –±—É—Ñ–µ—Ä—ã –≤ WASM
- HTML/CSS overlay for GUI performance
- Language switching < 100ms

### **Infrastructure Patterns:**
- Custom error enums with `thiserror`
- Async patterns with `tokio::spawn()`
- Zero-copy WASM-JS communication
- Production logging with `tracing`
- Fluent i18n with ICU MessageFormat
- Dioxus Server Functions for type-safe RPC
- WebSocket JWT authentication as first message

## Documentation Links

- **Babylon.js 8 - Main**: https://doc.babylonjs.com/
- **Babylon.js 8 - API**: https://doc.babylonjs.com/typedoc/
- **Babylon.js 8 - NPM**: https://www.npmjs.com/package/babylonjs
- **Babylon.js 8 - GIT**: https://github.com/BabylonJS/Babylon.js
- **Babylon.js 8 - WebXR**: https://learn.microsoft.com/ru-ru/windows/mixed-reality/develop/javascript/tutorials/babylonjs-webxr-helloworld/
- **Babylon.js 8 - WebXR Pianino**: https://learn.microsoft.com/ru-ru/windows/mixed-reality/develop/javascript/tutorials/babylonjs-webxr-piano/
- **Babylon.js 8 - –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –§–ü–°**
```
engine.runRenderLoop(function () {
        scene.render();
        stats.innerHTML = "FPS: <b>" +  BABYLON.Tools.GetFps().toFixed() + "</b>
});
```
- **Babylon.js 8 - —Å—Ç–∞—Ä—ã–µ –Ω–æ —Ü–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è**: https://habr.com/ru/articles/246259/
- **Babylon.js 8 - —Å—Ç–∞—Ä—ã–π –Ω–æ —Ü–µ–Ω–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ–π —Å—Ü–µ–Ω—ã –ø–æ –∫–æ—Ç–æ—Ä–æ–π –¥–µ–ª–∞–ª—Å—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å —á.1**: https://forasoft.github.io/webgl-babylonjs-p1/
- **Babylon.js 8 - —Å—Ç–∞—Ä—ã–π –Ω–æ —Ü–µ–Ω–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ–π —Å—Ü–µ–Ω—ã –ø–æ –∫–æ—Ç–æ—Ä–æ–π –¥–µ–ª–∞–ª—Å—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å —á.2**: https://forasoft.github.io/webgl-babylonjs-p2/
- **Babylon.js 8 - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç**: –æ—Å—å X –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ø—Ä–∞–≤–æ, –æ—Å—å Y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–≤–µ—Ä—Ö, –æ—Å—å Z –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–ø–µ—Ä–µ–¥ –≤ –≥–ª—É–±—å —ç–∫—Ä–∞–Ω–∞ –∞ –Ω–µ –Ω–∞ –º–µ–Ω—è

- **Vite 7 - Main**: https://vite.dev/
- **React 19 - Main**: https://react.dev/
- **TypeScript 5.9.2 - Main**: https://www.typescriptlang.org/

- **Astro Rust - Main**: https://docs.rs/astro/latest/astro/
- **Astro Rust - –õ–û–ö–ê–õ–¨–ù–ê–Ø –ö–û–ü–ò–Ø**: `./astro-rust/` –ø–∞–ø–∫–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (üîí –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨!)
- **Astro Rust - GIT ORIGINAL**: https://github.com/saurvs/astro-rust (‚ö†Ô∏è DEPRECATED - has bugs)
- **Astro Rust - CORRECTED FORK**: https://github.com/arossbell/astro-rust (üìö Reference only - use local copy!)

- **Teloxide - Main**: https://docs.rs/teloxide/latest/teloxide/
- **Teloxide - GIT**: https://github.com/teloxide/teloxide
- **Teloxide - Examples**: https://github.com/teloxide/teloxide/tree/master/examples
- **Telegram Bot API**: https://core.telegram.org/bots/api
- **ICU MessageFormat**: https://unicode-org.github.io/icu/userguide/format_parse/messages/
- **Fluent L10n**: https://projectfluent.org/
- **Rust I18N**: https://docs.rs/rust-i18n/latest/rust_i18n/

- **Dioxus - Main**: https://dioxuslabs.com/learn/0.7/
- **Dioxus - Main guide**: https://dioxuslabs.com/learn/0.7/guide
- **Dioxus - Main fullstack**: https://dioxuslabs.com/learn/0.7/guides/fullstack/
- **Dioxus - GIT**: https://github.com/DioxusLabs/dioxus
- **Dioxus - GIT Examples**: https://github.com/DioxusLabs/dioxus/tree/main/examples
- **Dioxus - GIT Examples Projects**: https://github.com/DioxusLabs/dioxus/tree/main/example-projects
- **Dioxus - Additional**: https://docs.rs/dioxus/0.7.0-alpha.3/dioxus/index.html

## üìö –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´ –° ASTRO-RUST
**–°–ù–ê–ß–ê–õ–ê - –ò–ó–£–ß–ï–ù–ò–ï –ö–û–î–û–í–û–ô –ë–ê–ó–´:**
1. **–ß–∏—Ç–∞–π –∫–æ–¥ –≤ `./astro-rust/src/`** - –∏–∑—É—á–∏ –≤—Å–µ –º–æ–¥—É–ª–∏: sun, lunar, planet, nutation, precess
2. **–ù–∞–π–¥–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–≤–æ–∏ —Ñ–æ—Ä–º—É–ª—ã!
3. **–ü–æ–Ω–∏–º–∞–π API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** - —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –≤ –∫–∞–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
4. **–ó–ê–¢–ï–ú —Å–æ–∑–¥–∞–≤–∞–π WASM –æ–±–µ—Ä—Ç–∫–∏** –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

## –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û
**Enforced by quality-rules.toml and Makefile:**
- `unwrap()`, `expect()`, `panic!()` - –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ (clippy deny)
- `HashMap::new()`, `Vec::new()` - —Ç–æ–ª—å–∫–æ `with_capacity()` (detected by make anti-patterns)
- `as` conversions - —Ç–æ–ª—å–∫–æ `TryFrom` (clippy as_conversions = deny)
- `unsafe_code` - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–µ—â–µ–Ω (rust lint deny)
- Multiple WASM calls per frame - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω `compute_all(t)` (make wasm-perf)
- `.await` –≤ —Ü–∏–∫–ª–∞—Ö - –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ real-time –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (clippy await_holding_lock = deny)
- `mem_forget` - denial rule (clippy mem_forget = deny)
- `todo!()`, `unimplemented!()` - –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π (clippy deny)
- **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ `./astro-rust/`** - —Å—Ç—Ä–æ–≥–æ read-only!
- **JavaScript-style comments in JSON** - use pure JSON syntax only

## Troubleshooting Guide

### Common Build Issues

#### 1. JSON Parsing Errors in package.json
**Error**: `Expected double-quoted property name in JSON`
**Solution**: Remove JavaScript-style comments (`//`) from package.json files - use pure JSON syntax only

#### 2. Quality Check Failures
**Error**: `‚ùå Found .expect() usage`
**Cause**: `.expect()` usage in test files vs production code
**Solution**:
- **Production code**: Always use proper error handling (`Result<T, E>`, `?` operator)
- **Test code**: `.expect()` is acceptable for test assertions and setup
- **Pattern**: Test files should use `.expect("descriptive test failure message")`

#### 3. TypeScript ES2025 Target Issue
**Error**: TypeScript compilation failures
**Solution**: Change `"target": "ES2025"` to `"target": "esnext"` in `frontend/tsconfig.json`

#### 4. WASM Build Failures
**Error**: wasm-pack build failures
**Solution**:
```bash
# Ensure wasm-pack is installed
cargo install wasm-pack

# Build with correct target
cd wasm-astro && wasm-pack build --release --target web
```

#### 5. Database Connection Issues
**Error**: SQLX compile-time check failures
**Solution**: Set DATABASE_URL or use offline mode:
```bash
export DATABASE_URL="postgresql://user:pass@localhost/starscalendars"
# OR for offline development:
cargo sqlx prepare
```

### Test Code Patterns (Exception to Anti-Pattern Rules)

```rust
// ‚úÖ ACCEPTABLE in test files only
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_user_creation() {
        let user_id = TelegramUserId::new(123456789)
            .expect("test user ID should be valid");
        // Test assertions can use .expect() with descriptive messages
    }
}

// ‚ùå FORBIDDEN in production code
fn create_user(id: i64) -> User {
    let user_id = TelegramUserId::new(id).expect("user ID failed"); // NEVER!
}

// ‚úÖ CORRECT in production code
fn create_user(id: i64) -> Result<User, UserError> {
    let user_id = TelegramUserId::new(id)?;
    Ok(User::new(user_id))
}
```
